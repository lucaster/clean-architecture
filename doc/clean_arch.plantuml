@startuml clean_arch
hide empty members

package CQRS {
  package dtos {
    abstract class CqrsRequest<P> {
      type: string
      {abstract} +getPayload(): P
    }
    abstract class CqrsResponse<P> {
      type: string
      {abstract} +getPayload(): P
    }
    class Command<P>
    class Query<P>
    class Event<P>
    class Outcome<P>
    class Result<P>
    Command <-- Outcome
    Query <-- Result
    CqrsRequest <|-- Command
    CqrsRequest <|-- Query
    CqrsRequest <|-- Event
    CqrsResponse <|-- Outcome
    CqrsResponse <|-- Result
  }
  package handlers {
    interface Handler<I, O> {
      {abstract} +handle(I): O
    }
    interface HandlerAsync<I> {
      {abstract} +handle(I): Void
    }
    interface QueryHandler<O> {
      {abstract} +handle(Query): O
    }
    interface QueryHandlerSync {
      {abstract} +handle(Query): Result
    }
    interface QueryHandlerAsync {
      {abstract} +handle(Query): Void
    }
    interface CommandHandler<O> {
      {abstract} +handle(Command): O
    }
    interface CommandHandlerSync {
      {abstract} +handle(Command): Outcome
    }
    interface CommandHandlerAsync {
      {abstract} +handle(Command): Void
    }
    interface EventHandler<O> {
      {abstract} +handle(Event): O
    }
    interface EventHandlerAsync {
      {abstract} +handle(Event): Void
    }
    Handler <|-- HandlerAsync
    Handler <|-- CommandHandler
    Handler <|-- QueryHandler
    Handler <|-- EventHandler
    HandlerAsync <|-- CommandHandlerAsync
    HandlerAsync <|-- QueryHandlerAsync
    HandlerAsync <|-- EventHandlerAsync
    CommandHandler <|-- CommandHandlerAsync
    CommandHandler <|-- CommandHandlerSync
    QueryHandler <|-- QueryHandlerAsync
    QueryHandler <|-- QueryHandlerSync
    EventHandler <|-- EventHandlerAsync
  }
  interface Broker {
    {abstract} +sendCommand(queue, Command): Outcome
    {abstract} +sendQuery(queue, Query): Result
    {abstract} +sendEvent(topic, Event): Void
    ---
    {abstract} +sendCommandAsync(queue, Command): Void
    {abstract} +sendQueryAsync(queue, Query): Void
    {abstract} +sendEventAsync(topic, Event): Void
    ---
    {abstract} +listenToCommand(queue, CommandHandler, group): Void
    {abstract} +listenToQuery(queue, QueryHandler, group): Void
    {abstract} +listenToEvent(topic, EventHandler): Void
  }
  legend
    P can be Void
    CqrsRequest::type examples: commandName,queryName,eventName,topic,channel
  endlegend
}
package "Clean Architecture" as CLEANARCH {
  abstract class UseCaseRequest<P> {
    {abstract} +getPayload(): P
  }
  abstract class UseCaseResponse<P> {
    {abstract} +getPayload(): P
  }
  note bottom of UseCaseRequest : P can be Void
  note bottom of UseCaseResponse : P can be Void
  interface UseCase<I: UseCaseRequest, O: UseCaseResponse> {
    {abstract} +handle(I): Try<O>
  }
  abstract class UseCaseTemplate<I, O> {
    +handle(I): O
    {abstract} #validateRequest(I)
    {abstract} #validateBusiness(I)
    {abstract} #work(I): Try<O>
  }
  ' note bottom of UseCaseTemplate : handle() uses Try pattern
  UseCase <|-- UseCaseTemplate
  UseCaseRequest .[dotted]right.> UseCase
  UseCase .[dotted]right.> UseCaseResponse
}
package Monads {
  abstract class Try<T>
}
package "My 'CQRS + Clean Architecture' App" {
  interface UseCaseFactory {
    {abstract} +getRequestMapper<M : CqrsRequest>()
    {abstract} +getResponseMaper<M : CqrsResponse>()
    {abstract} +getUseCase<M : CqrsRequest>()
    ---
    {abstract} +getRequestMapper(String type)
    {abstract} +getResponseMaper(String type)
    {abstract} +getUseCase(String type)
  }
  interface CleanArchToCqrsRequestMapper<M : CqrsRequest, R : UseCaseRequest>
  interface CqrsToCleanArchResponseMapper<R : UseCaseResponse, M : CqrsResponse>
  UseCaseFactory -[dotted]-> CleanArchToCqrsRequestMapper : provides
  UseCaseFactory -[dotted]-> CqrsToCleanArchResponseMapper : provides
  UseCaseFactory --[dotted]--> UseCase : provides

  package "Example: Command Executed Event" {
    class CommandExecutedEvent<<Event, CqrsRequest>> {
      +getPayload(): CommandExecutedEventPayload
    }
    class CommandExecutedEventPayload {
      command: Command
      outcome: Outcome
    }
    class OnCommandExecutedRequest<<UseCaseRequest>>
    class OnCommandExecutedResponse<<UseCaseResponse>> {
      +getPayload(): Void
    }
    class OnCommandExecutedUseCase<<UseCase>>
    class OnCommandExecutedRequestMapper<<CleanArchToCqrsRequestMapper>>
    class OnCommandExecutedResponseMapper<<CqrsToCleanArchResponseMapper>>
  }
}
@enduml
